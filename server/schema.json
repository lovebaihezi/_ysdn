{
    "user": {
            articles: Types.Array<Article>;
            videos: Types.Array<Video>;
            comments: Types.Array<Comment>;
            tags: Types.Array<Tag>;
            questions: Types.Array<Question>;
            answers: Types.Array<Answer>;
            activities: Types.Array<Activity>;
            articles: Types.Array<Article>;
            videos: Types.Array<Video>;
            comments: Types.Array<Comment>;
            tags: Types.Array<Tag>;
            questions: Types.Array<Question>;
            answers: Types.Array<Answer>;
            activities: Types.Array<Activity>;
            nickname: string;
            @Prop({ default: '' })
            avatarUrl: string;
        
            @Prop({ required: false, default: '' })
            backgroundImage: string;
        
            @Prop({
                type: [raw({ name: { type: String }, id: { type: String } })],
                default: [],
            })
            marks: { name: productionName; id: string }[];
        
            @Prop({
                type: [{ type: SchemaTypes.ObjectId, ref: UserInfo.name }],
                default: [],
            })
            follow: Types.Array<UserInfo>;
        
            @Prop({
                type: [{ type: SchemaTypes.ObjectId, ref: UserInfo.name }],
                default: [],
            })
            follower: Types.Array<UserInfo>;
        
            @Prop({
                type: [{ type: SchemaTypes.ObjectId, ref: 'Notification' }],
                default: [],
            })
            notifications: Types.Array<Notification>;
        
            @Prop({
                required: true,
                min: [4, 'username is less than 4'],
                max: [20, 'username is longer than 20'],
            })
            username: string; // this will simplify code when find
        
            @Prop({
                required: true,
                min: [8, 'password is less than 8'],
                max: [20, 'password is longer than 20'],
            })
            password: string;
        
            @Prop({ required: false, type: String })
            email: string;
        
            @Prop({
                type: UserProductSchema,
                ref: UserProduct.name,
                default: {
                    videos: [],
                    tags: [],
                    answers: [],
                    articles: [],
                    questions: [],
                    activities: [],
                    comments: [],
                },
            })
            userProduct: UserProductDocument;
        
            @Prop({
                type: LikeSchema,
                ref: Like.name,
                default: {
                    videos: [],
                    tags: [],
                    answers: [],
                    articles: [],
                    questions: [],
                    activities: [],
                    comments: [],
                },
            })
            like: Like;
        
            @Prop({ type: [{ type: Types.ObjectId }] })
            readHistory: Types.Array<ObjectId>;
        }
    },
    "userInfo": {
        "username": "String",
        "nickname": "String",
        "avatarUrl": "String"
    },
    "like": {
        "articles": "Array<Article>",
        "videos": "Array<Video>",
        "comments": "Array<Comment>",
        "tags": "Array<Tag>"
    },
    "userProduct": {
        "articles": "Array<Article>",
        "videos": "Array<Video>",
        "comments": "Array<Comment>",
        "tags": "Array<Tag>"
    },
    "article": {
        "lastModifyTime": "Date",
        "likes": " Array<ObjectId>",
        "marks": " Array<ObjectId>",
        "tags": "Array<String>",
        "read": "Number",
        "title": "String",
        "createTime": "Date",
        "approval": "Number",
        "modifyTime": "Array<Date>",
        "markAmount": "Number",
        "imageUrls": "Array<String>",
        "disapproval": "Number",
        "comments": "Array<Comment>",
        "commentsAmount": "Number",
        "content": "String",
        "author": "UserInfo",
        "coverImgUrl": "String"
    },
    "Comment": {
        "content": "String",
        "author": "UserInfo",
        "answerTime": "Date",
        "approval": "Number",
        "reply": "Array<Reply>",
        "disapproval": "Number"
    },
    "Reply": {
        "replay": "Array<Reply>",
        "content": "String",
        "createTime": "Date",
        "author": "UserInfo"
    }
}