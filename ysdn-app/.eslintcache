[{"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\form\\index.tsx":"1","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\login\\index.tsx":"2","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Login\\index.tsx":"3","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\App.tsx":"4","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\forbidden-pages\\404\\404-page.tsx":"5","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\menu\\index.tsx":"6","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\find-my-password\\index.tsx":"7","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Register\\index.ts":"8","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\find-password\\Next\\index.ts":"9","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\auth\\index.ts":"10","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Login\\login-form\\index.tsx":"11","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\fetch-hook.tsx":"12","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\index.tsx":"13","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\forbidden-pages\\forbidden.tsx":"14","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\index.ts":"15","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\index.tsx":"16","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\find-my-password\\Next\\index.tsx":"17","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\index-page\\index.tsx":"18"},{"size":7768,"mtime":1613564216180,"results":"19","hashOfConfig":"20"},{"size":5841,"mtime":1613565568765,"results":"21","hashOfConfig":"20"},{"size":87,"mtime":1611562409828,"results":"22","hashOfConfig":"20"},{"size":2684,"mtime":1613567271236,"results":"23","hashOfConfig":"20"},{"size":134,"mtime":1611130878838,"results":"24","hashOfConfig":"20"},{"size":1813,"mtime":1613564532823,"results":"25","hashOfConfig":"20"},{"size":5211,"mtime":1613566671993,"results":"26","hashOfConfig":"20"},{"size":1513,"mtime":1613399168558,"results":"27","hashOfConfig":"20"},{"size":1346,"mtime":1613536217422,"results":"28","hashOfConfig":"20"},{"size":451,"mtime":1613536417103,"results":"29","hashOfConfig":"20"},{"size":1304,"mtime":1613548911181,"results":"30","hashOfConfig":"20"},{"size":3136,"mtime":1613547385581,"results":"31","hashOfConfig":"20"},{"size":500,"mtime":1611113959239,"results":"32","hashOfConfig":"20"},{"size":66,"mtime":1611130895088,"results":"33","hashOfConfig":"20"},{"size":108,"mtime":1613393543994,"results":"34","hashOfConfig":"20"},{"size":70,"mtime":1611562802912,"results":"35","hashOfConfig":"20"},{"size":4820,"mtime":1613399046293,"results":"36","hashOfConfig":"20"},{"size":3811,"mtime":1613373569181,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"2eokn4",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\form\\index.tsx",["77","78","79","80","81","82","83","84"],"import React from 'react';\r\nimport utils from '../utils';\r\nimport * as tools from '../tools';\r\nimport { user } from '../interface';\r\nimport {\r\n    Box,\r\n    BoxProps,\r\n    TextFieldProps,\r\n    TextField,\r\n    Tooltip,\r\n    TooltipProps,\r\n} from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nexport interface formFc<\r\n    formArgument = {},\r\n    initialArgument = {},\r\n    WarningArgument = {},\r\n    waitingArgument = {},\r\n    parsingArgument = {},\r\n    errorArgument = {},\r\n    fullfilArgument = {}\r\n> extends React.FC<{\r\n        FormElement: React.FC<formArgument>;\r\n        InitialElement: React.FC<initialArgument>;\r\n        WarningElement: React.FC<WarningArgument>;\r\n        WaitingElement: React.FC<waitingArgument>;\r\n        ParsingElement: React.FC<parsingArgument>;\r\n        ErrorElement: React.FC<errorArgument>;\r\n        FullfilElement: React.FC<fullfilArgument>;\r\n    }> {}\r\n\r\n//* : first step : status render in form,  *complete! ✔\r\n//* : Next step : status render should be the argument(, and logic should also be an argument ?,but i guess this would cause leak of perform ) ✔\r\n//TODO : * Next step : let form become useForm ,consider useForm\r\n\r\n// function useForm<\r\n//     formArgument extends {} = {},\r\n//     initialArgument extends {} = {},\r\n//     waitingArgument extends {} = {},\r\n//     parsingArgument extends {} = {},\r\n//     errorArgument extends {} = {},\r\n//     fullfilArgument extends {} = {}\r\n// >({\r\n//     FormElement,\r\n//     InitialElement,\r\n//     WaitingElement,\r\n//     ParsingElement,\r\n//     ErrorElement,\r\n//     FullfilElement,\r\n// }: {\r\n//     FormElement: React.FC<formArgument>;\r\n//     InitialElement: React.FC<initialArgument>;\r\n//     WaitingElement: React.FC<waitingArgument>;\r\n//     ParsingElement: React.FC<parsingArgument>;\r\n//     ErrorElement: React.FC<errorArgument>;\r\n//     FullfilElement: React.FC<fullfilArgument>;\r\n// }) {\r\n//     const Form: formFc<\r\n//         formArgument,\r\n//         initialArgument,\r\n//         waitingArgument,\r\n//         parsingArgument,\r\n//         errorArgument,\r\n//         fullfilArgument\r\n//     > = () => {\r\n//         const [res, err, Fetch, Catch] = utils.useEveryFetch();\r\n//         const [Json, setJson] = React.useState<unknown>();\r\n//         const [Render, setRender] = React.useState<JSX.Element>(\r\n//             <InitialElement />\r\n//         );\r\n//         const [clicked, setClick] = React.useState<boolean>(false);\r\n//         async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n//             e.preventDefault();\r\n//             if (!clicked) {\r\n//                 setClick(true);\r\n//                 setRender(<WaitingElement />);\r\n//                 const formData = tools.formTake(e.currentTarget);\r\n//                 try {\r\n//                     await Fetch('http://localhost:8000/user/login', {\r\n//                         method: 'post',\r\n//                         body: JSON.stringify(formData),\r\n//                         headers: new Headers({\r\n//                             'Content-Type': 'application/json',\r\n//                         }),\r\n//                     });\r\n//                     setRender(<ParsingElement />);\r\n//                     setJson(await res?.json());\r\n//                     setRender(<FullfilElement />);\r\n//                 } catch (e) {\r\n//                     Catch(e);\r\n//                     setClick(true);\r\n//                 }\r\n//             }\r\n//         }\r\n//         React.useEffect(() => {\r\n//             if (!res) {\r\n//                 setClick(false);\r\n//             }\r\n//             return () => {};\r\n//         }, [res]);\r\n//         React.useEffect(() => {\r\n//             if (err) {\r\n//                 setRender(<ErrorElement error={err} />);\r\n//             } else if (res?.status === 200) {\r\n//                 setRender(<FullfilElement />);\r\n//             } else if (res?.status === 404) {\r\n//                 setClick(true);\r\n//                 setRender(<ErrorElement error={new Error('404 Not Found!')} />);\r\n//             }\r\n//             return () => {};\r\n//         }, [err, res, Json, ErrorElement, FullfilElement]);\r\n//         return (\r\n//             <FormElement\r\n//                 hooks={handleSubmit}\r\n//                 State={Render}\r\n//                 clickState={clicked}\r\n//             />\r\n//         );\r\n//     };\r\n//     return Form;\r\n// }\r\n/*\r\n  TODO : 1. 加入状态传递\r\n  TODO : 2. url以及form提交函数抽离,\r\n  TODO : 3. 做成useForm函数,泛型多参... // 或者是form容器,将逻辑拆离开???待思考,先简单完成\r\n*/\r\nexport const Form: formFc<\r\n    {\r\n        hooks: (e: React.FormEvent<HTMLFormElement>) => void;\r\n        clickState: boolean;\r\n        State: JSX.Element;\r\n    },\r\n    {},\r\n    { msg: { msg: string } },\r\n    {},\r\n    {},\r\n    { error: Error },\r\n    { res: user }\r\n> = ({\r\n    FormElement,\r\n    InitialElement,\r\n    WarningElement,\r\n    WaitingElement,\r\n    ParsingElement,\r\n    ErrorElement,\r\n    FullfilElement,\r\n}) => {\r\n    const [err, setError] = React.useState<Error>();\r\n    const [Json, setJson] = React.useState<unknown>();\r\n    const [Render, setRender] = React.useState<JSX.Element>(<InitialElement />);\r\n    const [clicked, setClick] = React.useState<boolean>(false);\r\n    async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        // if (!clicked) {\r\n        // setClick(true);\r\n        setRender(<WaitingElement />);\r\n        const rules = {};\r\n        setRender(\r\n            <WarningElement msg={tools.formCheck(e.currentTarget, rules)} />\r\n        );\r\n        const formData: string = JSON.stringify(\r\n            tools.formTake(e.currentTarget)\r\n        );\r\n        console.log(formData);\r\n        try {\r\n            setJson(\r\n                // (\r\n                //     await axios({\r\n                //         url: 'http://localhost:8000/user/login',\r\n                //         method: 'post',\r\n                //         data: JSON.parse(formData),\r\n                //         headers: new Headers({\r\n                //             'Content-Type': 'application/json',\r\n                //         }),\r\n                //     })\r\n                // )?.data\r\n                await (\r\n                    await fetch('http://localhost:8000/user/login', {\r\n                        body: formData,\r\n                        method: 'post',\r\n                        headers: new Headers({\r\n                            'Content-Type': 'application/json',\r\n                        }),\r\n                    })\r\n                )?.json()\r\n            );\r\n        } catch (e) {\r\n            setError(e);\r\n            setClick(false);\r\n        }\r\n        // }\r\n    }\r\n    React.useEffect(() => {\r\n        if (err) {\r\n            setRender(<ErrorElement error={err} />);\r\n        } else if (!Json) {\r\n            setClick(false);\r\n        } else {\r\n            if ((Json as user)?.Account) {\r\n                setRender(<FullfilElement res={Json as user} />);\r\n            } else {\r\n                setRender(\r\n                    <ErrorElement\r\n                        error={new Error('server error,please try again')}\r\n                    />\r\n                );\r\n                setClick(false);\r\n            }\r\n        }\r\n    }, [Json, err, FullfilElement, ErrorElement]);\r\n    return (\r\n        <FormElement hooks={handleSubmit} State={Render} clickState={clicked} />\r\n    );\r\n};\r\n\r\ntype formProps = React.DetailedHTMLProps<\r\n    React.FormHTMLAttributes<HTMLFormElement>,\r\n    HTMLFormElement\r\n> & {};\r\n\r\nconst setForm: React.FC<{\r\n    Render: JSX.Element;\r\n    formProp: formProps;\r\n}> = ({ Render, formProp, children }) => (\r\n    <form {...formProp}>\r\n        {Render}\r\n        {children}\r\n    </form>\r\n);\r\n\r\nexport default setForm;\r\n","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\login\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Login\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\App.tsx",["85"],"import React from 'react';\n\nimport {\n    Switch,\n    BrowserRouter,\n    Route,\n    Link,\n    HashRouter,\n} from 'react-router-dom';\n\nimport Index, * as Pages from './pages/index';\n\nimport './App.css';\nimport { Button, Container, CssBaseline, IconButton } from '@material-ui/core';\nimport ButtonAppBar from './components/menu';\nimport { user } from './interface';\nimport AddIcon from '@material-ui/icons/Add';\nimport { LoginState } from './auth';\n\nconst alreadyLogin = [\n    <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        key=\"user-link\"\n        aria-label=\"user\"></IconButton>,\n    <Button\n        color=\"inherit\"\n        component={Link}\n        to=\"/upload\"\n        key=\"upload-button\"\n        startIcon={<AddIcon />}>\n        upload\n    </Button>,\n];\n\nfunction App() {\n    const [loginStatus, setLoginStatus] = React.useState<false | user>(false);\n    const [menuRender, setMenuRender] = React.useState<Array<JSX.Element>>([\n        <Button color=\"inherit\" key=\"login-button\" component={Link} to=\"/login\">\n            Login\n        </Button>,\n    ]);\n    function setState(res: user) {\n        setLoginStatus(res);\n    }\n    React.useEffect(() => {\n        // console.log(loginStatus);\n        if (loginStatus && loginStatus?.Account?.username) {\n            setMenuRender(alreadyLogin);\n        } else {\n            setLoginStatus(false);\n        }\n        return () => {};\n    }, [loginStatus]);\n    return (\n        <>\n            <CssBaseline />\n            <LoginState.Provider value={loginStatus}>\n                <BrowserRouter basename=\"/\" forceRefresh={false}>\n                    <ButtonAppBar Render={menuRender} />\n                    <Container maxWidth=\"md\" className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Index State={loginStatus} />\n                            </Route>\n                            <Route exact path=\"/login\">\n                                <Pages.Login setState={setState} />\n                            </Route>\n                            <Route exact path=\"/register\">\n                                <Pages.Register State={loginStatus} />\n                            </Route>\n                            <Route exact path=\"/find-password\">\n                                <Pages.FDM />\n                            </Route>\n                            <Route path=\"/*\">\n                                <Pages.Page404 />\n                            </Route>\n                        </Switch>\n                    </Container>\n                </BrowserRouter>\n            </LoginState.Provider>\n        </>\n    );\n}\n\nexport default App;\n","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\forbidden-pages\\404\\404-page.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\menu\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\find-my-password\\index.tsx",["86"],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Register\\index.ts",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\find-password\\Next\\index.ts",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\auth\\index.ts",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components-config\\Login\\login-form\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\fetch-hook.tsx",["87"],"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { useState, useEffect } from 'react';\r\n\r\nenum netResponse {\r\n    fulfilled,\r\n    startFetching,\r\n    inFetching,\r\n    inParsing,\r\n    inErroring,\r\n}\r\n\r\nexport interface basicNetResponse extends Object {\r\n    error?: string | Error | object | any;\r\n    netResponse?: boolean;\r\n    errorMessage: string;\r\n    responseType: string;\r\n    response: string | object | null;\r\n}\r\n\r\n//only for json and string\r\nexport default function useJsonFetch<\r\n    T extends basicNetResponse = basicNetResponse\r\n>(state: T): [T, Function] {\r\n    const [Response, setResponse] = useState<T>({\r\n        ...state,\r\n        netResponse: netResponse.startFetching,\r\n        error: 'nothing good or bad happened',\r\n    });\r\n    return [\r\n        Response,\r\n        async (url: string, request: Request) => {\r\n            try {\r\n                const response = await fetch(url, request);\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inFetching,\r\n                });\r\n                const resString = await response.text();\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inParsing,\r\n                });\r\n                try {\r\n                    const res = JSON.parse(resString);\r\n                    setResponse({ ...Response, responseType: 'Object', res });\r\n                } catch (e) {\r\n                    setResponse({\r\n                        ...Response,\r\n                        responseType: 'string',\r\n                        resString,\r\n                    });\r\n                }\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.fulfilled,\r\n                });\r\n            } catch (error) {\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inErroring,\r\n                    errorMessage: `error + ${error.toString()}`,\r\n                });\r\n            }\r\n        },\r\n    ];\r\n}\r\n\r\nconst useEveryFetch: () => [\r\n    Response | undefined,\r\n    Error | undefined,\r\n    (url: string, options: RequestInit) => Promise<void>,\r\n    (e: Error) => void\r\n] = () => {\r\n    const [response, setResponse] = useState<Response>();\r\n    const [error, setError] = useState<Error>();\r\n    return [\r\n        response,\r\n        error,\r\n        async (url, options) => {\r\n            try {\r\n                const res = await fetch(url, options);\r\n                setResponse(res);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n        },\r\n        (e: Error) => {\r\n            setError(e);\r\n        },\r\n    ];\r\n};\r\n\r\nconst useJSONFetch = () => {\r\n    const [res, setRes] = useState<AxiosResponse>();\r\n    const [err, setError] = useState<Error>();\r\n    return [\r\n        res,\r\n        err,\r\n        async (options: AxiosRequestConfig) => {\r\n            setRes(await axios(options));\r\n        },\r\n        (e: Error) => {\r\n            setError(e);\r\n        },\r\n    ];\r\n};\r\n\r\nexport { useEveryFetch, useJSONFetch };\r\n","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\forbidden-pages\\forbidden.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\index.ts",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\find-my-password\\Next\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\index-page\\index.tsx",[],{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":13},{"ruleId":"88","severity":1,"message":"92","line":6,"column":5,"nodeType":"90","messageId":"91","endLine":6,"endColumn":8},{"ruleId":"88","severity":1,"message":"93","line":7,"column":5,"nodeType":"90","messageId":"91","endLine":7,"endColumn":13},{"ruleId":"88","severity":1,"message":"94","line":8,"column":5,"nodeType":"90","messageId":"91","endLine":8,"endColumn":19},{"ruleId":"88","severity":1,"message":"95","line":9,"column":5,"nodeType":"90","messageId":"91","endLine":9,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":10,"column":5,"nodeType":"90","messageId":"91","endLine":10,"endColumn":12},{"ruleId":"88","severity":1,"message":"97","line":11,"column":5,"nodeType":"90","messageId":"91","endLine":11,"endColumn":17},{"ruleId":"88","severity":1,"message":"98","line":13,"column":8,"nodeType":"90","messageId":"91","endLine":13,"endColumn":13},{"ruleId":"88","severity":1,"message":"99","line":8,"column":5,"nodeType":"90","messageId":"91","endLine":8,"endColumn":15},{"ruleId":"88","severity":1,"message":"100","line":6,"column":25,"nodeType":"90","messageId":"91","endLine":6,"endColumn":29},{"ruleId":"88","severity":1,"message":"101","line":2,"column":20,"nodeType":"90","messageId":"91","endLine":2,"endColumn":29},"@typescript-eslint/no-unused-vars","'utils' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'BoxProps' is defined but never used.","'TextFieldProps' is defined but never used.","'TextField' is defined but never used.","'Tooltip' is defined but never used.","'TooltipProps' is defined but never used.","'axios' is defined but never used.","'HashRouter' is defined but never used.","'Link' is defined but never used.","'useEffect' is defined but never used."]