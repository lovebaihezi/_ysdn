[{"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\login\\index.tsx":"1","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\App.tsx":"2","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\hook-utils.tsx":"3","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\index.tsx":"4","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\fetch-hook.tsx":"5","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\Login\\login-form\\index.tsx":"6","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\Login\\index.tsx":"7","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\index.ts":"8","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\form-take\\index.ts":"9"},{"size":2975,"mtime":1613212288023,"results":"10","hashOfConfig":"11"},{"size":624,"mtime":1611192610702,"results":"12","hashOfConfig":"11"},{"size":104,"mtime":1611192795143,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1611113959239,"results":"14","hashOfConfig":"11"},{"size":2709,"mtime":1613198807491,"results":"15","hashOfConfig":"11"},{"size":1225,"mtime":1613017433361,"results":"16","hashOfConfig":"11"},{"size":87,"mtime":1611562409828,"results":"17","hashOfConfig":"11"},{"size":59,"mtime":1613197297399,"results":"18","hashOfConfig":"11"},{"size":519,"mtime":1613211560212,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"2eokn4",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\pages\\login\\index.tsx",["42","43","44","45","46","47"],"import { Box, Input } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport utils from '../../utils';\r\nimport * as tools from '../../tools';\r\nimport { loginFormComponent } from '../../components/Login';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { join } from 'path';\r\n\r\nconst FormElement: React.FC<{\r\n    hooks: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}> = props => {\r\n    const loginFormStyles = loginFormComponent.loginForm.createInputStyles();\r\n    return (\r\n        <Box {...loginFormComponent.box} className={loginFormStyles.box}>\r\n            <form\r\n                {...loginFormComponent.form}\r\n                onSubmit={props.hooks}\r\n                className={loginFormStyles.form}>\r\n                {loginFormComponent.loginForm.inputElements.map(\r\n                    elementComponent => (\r\n                        <Box key={elementComponent.name}>\r\n                            <Input\r\n                                {...elementComponent}\r\n                                className={loginFormStyles.Input}\r\n                            />\r\n                        </Box>\r\n                    )\r\n                )}\r\n            </form>\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst WaitingElement: React.FC<any> = () => <code>\"Fetching...\"</code>;\r\nconst ParsingElement: React.FC<any> = () => <code>\"Parsing...\"</code>;\r\nconst ErrorElement: React.FC<{ error: string }> = ({ error }) => (\r\n    <strong>{error}</strong>\r\n);\r\nexport const LoginForm: React.FC<any> = () => {\r\n    const [res, error, Fetch, Catch] = utils.useEveryFetch();\r\n    const [Json, setJson] = React.useState<unknown>();\r\n    const [Render, setRender] = React.useState<JSX.Element>(\r\n        <FormElement hooks={handleLogin} />\r\n    );\r\n    async function handleLogin(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        // setRender(<WaitingElement />);\r\n        const formData = tools.formTake(e.currentTarget);\r\n        console.log(formData);\r\n        try {\r\n            await Fetch('http://localhost:8000/user/login', {\r\n                method: 'post',\r\n                body: JSON.stringify(formData),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                }),\r\n            });\r\n            // setRender(<ParsingElement />);\r\n            setJson(await res?.json());\r\n            console.error();\r\n        } catch (e) {\r\n            Catch(e);\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        if (error) {\r\n            // setRender(<ErrorElement error={error.toString()} />);\r\n        } else if (res?.status === 200) {\r\n            console.log(res);\r\n            // setRender(<Redirect to=\"/\" />);\r\n        } else if (res?.status === 404) {\r\n            // setRender(<ErrorElement error={'404 Not Found!'} />);\r\n        }\r\n        return () => {};\r\n    }, [error, res, Json]);\r\n    return Render;\r\n};\r\n\r\nexport const Login: React.FC<any> = () => {\r\n    return <LoginForm />;\r\n};\r\n","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\App.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\hook-utils.tsx",[],["48","49"],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\index.tsx",[],["50","51"],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\utils\\hook\\fetch-hook.tsx",["52"],"import { useState, useEffect } from 'react';\r\n\r\nenum netResponse {\r\n    fulfilled,\r\n    startFetching,\r\n    inFetching,\r\n    inParsing,\r\n    inErroring,\r\n}\r\n\r\nexport interface basicNetResponse extends Object {\r\n    error?: string | Error | object | any;\r\n    netResponse?: boolean;\r\n    errorMessage: string;\r\n    responseType: string;\r\n    response: string | object | null;\r\n}\r\n\r\n//only for json and string\r\nexport default function useJsonFetch<\r\n    T extends basicNetResponse = basicNetResponse\r\n>(state: T): [T, Function] {\r\n    const [Response, setResponse] = useState<T>({\r\n        ...state,\r\n        netResponse: netResponse.startFetching,\r\n        error: 'nothing good or bad happened',\r\n    });\r\n    return [\r\n        Response,\r\n        async (url: string, request: Request) => {\r\n            try {\r\n                const response = await fetch(url, request);\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inFetching,\r\n                });\r\n                const resString = await response.text();\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inParsing,\r\n                });\r\n                try {\r\n                    const res = JSON.parse(resString);\r\n                    setResponse({ ...Response, responseType: 'Object', res });\r\n                } catch (e) {\r\n                    setResponse({\r\n                        ...Response,\r\n                        responseType: 'string',\r\n                        resString,\r\n                    });\r\n                }\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.fulfilled,\r\n                });\r\n            } catch (error) {\r\n                setResponse({\r\n                    ...Response,\r\n                    netResponse: netResponse.inErroring,\r\n                    errorMessage: `error + ${error.toString()}`,\r\n                });\r\n            }\r\n        },\r\n    ];\r\n}\r\n\r\nconst useEveryFetch: () => [\r\n    Response | undefined,\r\n    string | undefined,\r\n    (url: string, options: RequestInit) => Promise<void>,\r\n    (e: Error) => void\r\n] = () => {\r\n    const [response, setResponse] = useState<Response>();\r\n    const [error, setError] = useState<string>();\r\n    return [\r\n        response,\r\n        error,\r\n        async (url, options) => {\r\n            try {\r\n                const res = await fetch(url, options);\r\n                setResponse(res);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n        },\r\n        (e: Error) => {\r\n            setError(e.message);\r\n        },\r\n    ];\r\n};\r\n\r\nexport { useEveryFetch };\r\n","U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\Login\\login-form\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\components\\Login\\index.tsx",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\index.ts",[],"U:\\recover\\WorkSpace\\ysdn\\ysdn-app\\src\\tools\\form-take\\index.ts",[],{"ruleId":"53","severity":1,"message":"54","line":6,"column":10,"nodeType":"55","messageId":"56","endLine":6,"endColumn":18},{"ruleId":"53","severity":1,"message":"57","line":7,"column":10,"nodeType":"55","messageId":"56","endLine":7,"endColumn":14},{"ruleId":"53","severity":1,"message":"58","line":34,"column":7,"nodeType":"55","messageId":"56","endLine":34,"endColumn":36},{"ruleId":"53","severity":1,"message":"59","line":35,"column":7,"nodeType":"55","messageId":"56","endLine":35,"endColumn":36},{"ruleId":"53","severity":1,"message":"60","line":36,"column":7,"nodeType":"55","messageId":"56","endLine":36,"endColumn":48},{"ruleId":"53","severity":1,"message":"61","line":42,"column":20,"nodeType":"55","messageId":"56","endLine":42,"endColumn":29},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"53","severity":1,"message":"68","line":1,"column":20,"nodeType":"55","messageId":"56","endLine":1,"endColumn":29},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'join' is defined but never used.","'WaitingElement' is assigned a value but never used.","'ParsingElement' is assigned a value but never used.","'ErrorElement' is assigned a value but never used.","'setRender' is assigned a value but never used.","no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]